package com.rockthejvm.part5testing

import zio._
import zio.test._
import com.rockthejvm.utils._

// Property based testing:
// Testing properties (also known as 'proofs' by generating values and stress-testing your statements for counter examples)
object PropertyBasedTesting extends ZIOSpecDefault {

  // "proofs"
  // If I want to test, let's say, the associativity of mathematical computation, I will say something like:
  // for all x,y,z, we have (x + y) + z == x + (y + z)
  // We would need to generate a variety of combinations of x,y,z so we could find an example that make the premise fail
  def spec = suite("property-based-testing suite")(
    test("property-based-testing basics") {
      // These Gen.int will generate 100 cases by default
      check(Gen.int, Gen.int, Gen.int) { (x, y, z) =>
        assertTrue(((x + y) + z) == (x + (y + z)))
      }
    },
    test("property-based-testing basics fail") {
      check(Gen.int, Gen.int, Gen.int) { (x, y, z) =>
        assertTrue(((x + y) + z) == (x - (y + z)))
      }
      // Note about the 'shrinking' - note that the error is giving before the shrinking and the shrinked value. This is for you to
      // have an easy way to detect what went wrong.
      // Test failed after 1 iteration with input: (0,0,-1) <-- More understandable
      // Original input before shrinking was: (-1295463240,421138995,-1691075023)  <-- Less 'debuggable'. This is what was really generated by Gen.int generators.
    }
  )

  // Gen[R,A]; R = 'environment', A = value (they can't fail, they don't have E)
  val intGenerator = Gen.int
  val charGenerator = Gen.char // also alphaChar, alphaNumericChar, asciiChar, hexChar, printableChar, etc
  val stringGenerator = Gen.string
  val cappedLengthStringGenerator = Gen.stringN(10)(Gen.alphaNumericChar)
  val constGenerator = Gen.const("Scala") // always generates "Scala"
  val valuesGenerator = Gen.elements(1, 3, 5, 7, 9) // selects 1 from these ones
  val valuesIterableGenerator = Gen.fromIterable(1 to 1000)
  val uniformDoublesGenerator = Gen.uniform // select doubles between 0 and 1

  // Gens that produce collections
  val listGenerator = Gen.listOf(Gen.string) // Unbounded list of string
  val finiteSetGenerator = Gen.setOfN(10) // sets of 10 integers

  // options / eithers
  val optionGenerator = Gen.option(Gen.int) // produce Option[Int]
  val eitherGenerator = Gen.either(Gen.string, Gen.int) // produce Either[String, Int]

  // combinators
  val zippedGenerator = Gen.int.zip(Gen.string) // produces (Int, String)
  val filteredGenerator = intGenerator.filter(_ % 3 == 0)
  val mappedGenerator = intGenerator.map(n =>
    (1 to n).map(_ => 'a').mkString
  ) // this will generate a string generator of words with lenght=n that start with 'a'

  val flatMappedGenerator = filteredGenerator.flatMap(lenght =>
    Gen.stringN(lenght)(Gen.alphaNumericChar)
  ) // This will generate strings with length % 3 == 0 from another int generator

  // for-comprehension
  // uuids have this format: 8 chars-4 chars-4 chars-12 chars (8-4-4-12)
  val uuidGenerator = for {
    part1 <- Gen.stringN(8)(Gen.alphaNumericChar)
    part2 <- Gen.stringN(4)(Gen.alphaNumericChar)
    part3 <- Gen.stringN(4)(Gen.alphaNumericChar)
    part4 <- Gen.stringN(12)(Gen.alphaNumericChar)
  } yield s"$part1-$part2-$part3-$part4"

  // general
  val randomGenerator = Gen.fromRandom(random => random.nextUUID)
  val effectGenerator = Gen.fromZIO(ZIO.succeed(42))
  val generalGenerator = Gen.unfoldGen(s = 0)(i => Gen.const(i + 1).zip(Gen.stringN(i)(Gen.alphaNumericChar)))
  // this will generate list of string with a property that every string will have increasing length
}

object GenerationPlayground extends ZIOAppDefault {
  def run = {
    // This generates a list of constantly increasing length strings
    val generalGenerator = Gen.unfoldGen /*This will generate a list*/ (s = 0)(i =>
      Gen.const(i + 1).zip(Gen.stringN(i)(Gen.alphaNumericChar))
    )
    val generatedListsZIO = generalGenerator.runCollectN(100) // 100 lists of List[String]
    val generatedListsZIO_v2 = generatedListsZIO.provideLayer(
      Sized.default
    ) // 100 elements (if we want to tweak that, we could use Sized.live(50) for instance)
    generatedListsZIO_v2.debugThread
  }
}
